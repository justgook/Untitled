{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE DeriveGeneric #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}
{- |
Module: Capnp.Protocol.Pure
Description: High-level generated module for Protocol.capnp
This module is the generated code for Protocol.capnp,
for the high-level api.
-}
module Capnp.Protocol.Pure (Chat(..), Package(..), Target(..), Capnp.ById.Xec169a28a3ba7b46.ping, Package'content(..)
) where
-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: Protocol.capnp
import Data.Int
import Data.Word
import Data.Default (Default(def))
import GHC.Generics (Generic)
import Data.Capnp.Basics.Pure (Data, Text)
import Control.Monad.Catch (MonadThrow)
import Data.Capnp.TraversalLimit (MonadLimit)
import Control.Monad (forM_)
import qualified Data.Capnp.Message as M'
import qualified Data.Capnp.Untyped as U'
import qualified Data.Capnp.Untyped.Pure as PU'
import qualified Data.Capnp.GenHelpers.Pure as PH'
import qualified Data.Capnp.Classes as C'
import qualified Data.Vector as V
import qualified Data.ByteString as BS
import qualified Capnp.ById.Xec169a28a3ba7b46
data Chat
    = Chat
        {id :: Word64,
        packages :: PU'.ListOf (Package)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Chat where
    type Cerial msg Chat = Capnp.ById.Xec169a28a3ba7b46.Chat msg
    decerialize raw = do
        Chat <$>
            (Capnp.ById.Xec169a28a3ba7b46.get_Chat'id raw) <*>
            (Capnp.ById.Xec169a28a3ba7b46.get_Chat'packages raw >>= C'.decerialize)
instance C'.Marshal Chat where
    marshalInto raw value = do
        case value of
            Chat{..} -> do
                Capnp.ById.Xec169a28a3ba7b46.set_Chat'id raw id
                let len_ = V.length packages
                field_ <- Capnp.ById.Xec169a28a3ba7b46.new_Chat'packages len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (packages V.! i)
instance C'.Cerialize s Chat
instance C'.FromStruct M'.ConstMsg Chat where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xec169a28a3ba7b46.Chat M'.ConstMsg)
instance Default Chat where
    def = PH'.defaultStruct
data Package
    = Package
        {from :: Target,
        to :: Target,
        timestamp :: Int32,
        content :: Package'content}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Package where
    type Cerial msg Package = Capnp.ById.Xec169a28a3ba7b46.Package msg
    decerialize raw = do
        Package <$>
            (Capnp.ById.Xec169a28a3ba7b46.get_Package'from raw >>= C'.decerialize) <*>
            (Capnp.ById.Xec169a28a3ba7b46.get_Package'to raw >>= C'.decerialize) <*>
            (Capnp.ById.Xec169a28a3ba7b46.get_Package'timestamp raw) <*>
            (Capnp.ById.Xec169a28a3ba7b46.get_Package'content raw >>= C'.decerialize)
instance C'.Marshal Package where
    marshalInto raw value = do
        case value of
            Package{..} -> do
                field_ <- Capnp.ById.Xec169a28a3ba7b46.new_Package'from raw
                C'.marshalInto field_ from
                field_ <- Capnp.ById.Xec169a28a3ba7b46.new_Package'to raw
                C'.marshalInto field_ to
                Capnp.ById.Xec169a28a3ba7b46.set_Package'timestamp raw timestamp
                field_ <- Capnp.ById.Xec169a28a3ba7b46.get_Package'content raw
                C'.marshalInto field_ content
instance C'.Cerialize s Package
instance C'.FromStruct M'.ConstMsg Package where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xec169a28a3ba7b46.Package M'.ConstMsg)
instance Default Package where
    def = PH'.defaultStruct
data Target
    = Target'global
    | Target'personal (Word64)
    | Target'unknown' Word16
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Target where
    type Cerial msg Target = Capnp.ById.Xec169a28a3ba7b46.Target msg
    decerialize raw = do
        raw <- Capnp.ById.Xec169a28a3ba7b46.get_Target' raw
        case raw of
            Capnp.ById.Xec169a28a3ba7b46.Target'global -> pure Target'global
            Capnp.ById.Xec169a28a3ba7b46.Target'personal val -> pure (Target'personal val)
            Capnp.ById.Xec169a28a3ba7b46.Target'unknown' val -> pure $ Target'unknown' val
instance C'.Marshal Target where
    marshalInto raw value = do
        case value of
            Target'global -> Capnp.ById.Xec169a28a3ba7b46.set_Target'global raw
            Target'personal arg_ -> Capnp.ById.Xec169a28a3ba7b46.set_Target'personal raw arg_
            Target'unknown' arg_ -> Capnp.ById.Xec169a28a3ba7b46.set_Target'unknown' raw arg_
instance C'.Cerialize s Target
instance C'.FromStruct M'.ConstMsg Target where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xec169a28a3ba7b46.Target M'.ConstMsg)
instance Default Target where
    def = PH'.defaultStruct
data Package'content
    = Package'content'message (Text)
    | Package'content'pack (Data)
    | Package'content'unknown' Word16
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Package'content where
    type Cerial msg Package'content = Capnp.ById.Xec169a28a3ba7b46.Package'content msg
    decerialize raw = do
        raw <- Capnp.ById.Xec169a28a3ba7b46.get_Package'content' raw
        case raw of
            Capnp.ById.Xec169a28a3ba7b46.Package'content'message val -> Package'content'message <$> C'.decerialize val
            Capnp.ById.Xec169a28a3ba7b46.Package'content'pack val -> Package'content'pack <$> C'.decerialize val
            Capnp.ById.Xec169a28a3ba7b46.Package'content'unknown' val -> pure $ Package'content'unknown' val
instance C'.Marshal Package'content where
    marshalInto raw value = do
        case value of
            Package'content'message arg_ -> do
                field_ <- C'.cerialize (U'.message raw) arg_
                Capnp.ById.Xec169a28a3ba7b46.set_Package'content'message raw field_
            Package'content'pack arg_ -> do
                field_ <- Capnp.ById.Xec169a28a3ba7b46.new_Package'content'pack (BS.length arg_) raw
                C'.marshalInto field_ arg_
            Package'content'unknown' arg_ -> Capnp.ById.Xec169a28a3ba7b46.set_Package'content'unknown' raw arg_
instance C'.FromStruct M'.ConstMsg Package'content where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xec169a28a3ba7b46.Package'content M'.ConstMsg)
instance Default Package'content where
    def = PH'.defaultStruct