{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE DeriveGeneric #-}
{-# OPTIONS_GHC -Wno-unused-imports #-}
{- |
Module: Capnp.Addressbook.Pure
Description: High-level generated module for addressbook.capnp
This module is the generated code for addressbook.capnp,
for the high-level api.
-}
module Capnp.Addressbook.Pure (AddressBook(..), Person(..), Person'PhoneNumber(..), Person'employment(..), Capnp.ById.Xcd6db6afb4a0cf5c.Person'PhoneNumber'Type(..)
) where
-- Code generated by capnpc-haskell. DO NOT EDIT.
-- Generated from schema file: addressbook.capnp
import Data.Int
import Data.Word
import Data.Default (Default(def))
import GHC.Generics (Generic)
import Data.Capnp.Basics.Pure (Data, Text)
import Control.Monad.Catch (MonadThrow)
import Data.Capnp.TraversalLimit (MonadLimit)
import Control.Monad (forM_)
import qualified Data.Capnp.Message as M'
import qualified Data.Capnp.Untyped as U'
import qualified Data.Capnp.Untyped.Pure as PU'
import qualified Data.Capnp.GenHelpers.Pure as PH'
import qualified Data.Capnp.Classes as C'
import qualified Data.Vector as V
import qualified Data.ByteString as BS
import qualified Capnp.ById.Xcd6db6afb4a0cf5c
data AddressBook
    = AddressBook
        {people :: PU'.ListOf (Person)}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize AddressBook where
    type Cerial msg AddressBook = Capnp.ById.Xcd6db6afb4a0cf5c.AddressBook msg
    decerialize raw = do
        AddressBook <$>
            (Capnp.ById.Xcd6db6afb4a0cf5c.get_AddressBook'people raw >>= C'.decerialize)
instance C'.Marshal AddressBook where
    marshalInto raw value = do
        case value of
            AddressBook{..} -> do
                let len_ = V.length people
                field_ <- Capnp.ById.Xcd6db6afb4a0cf5c.new_AddressBook'people len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (people V.! i)
instance C'.Cerialize s AddressBook
instance C'.FromStruct M'.ConstMsg AddressBook where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xcd6db6afb4a0cf5c.AddressBook M'.ConstMsg)
instance Default AddressBook where
    def = PH'.defaultStruct
data Person
    = Person
        {id :: Word32,
        name :: Text,
        email :: Text,
        phones :: PU'.ListOf (Person'PhoneNumber),
        employment :: Person'employment}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Person where
    type Cerial msg Person = Capnp.ById.Xcd6db6afb4a0cf5c.Person msg
    decerialize raw = do
        Person <$>
            (Capnp.ById.Xcd6db6afb4a0cf5c.get_Person'id raw) <*>
            (Capnp.ById.Xcd6db6afb4a0cf5c.get_Person'name raw >>= C'.decerialize) <*>
            (Capnp.ById.Xcd6db6afb4a0cf5c.get_Person'email raw >>= C'.decerialize) <*>
            (Capnp.ById.Xcd6db6afb4a0cf5c.get_Person'phones raw >>= C'.decerialize) <*>
            (Capnp.ById.Xcd6db6afb4a0cf5c.get_Person'employment raw >>= C'.decerialize)
instance C'.Marshal Person where
    marshalInto raw value = do
        case value of
            Person{..} -> do
                Capnp.ById.Xcd6db6afb4a0cf5c.set_Person'id raw id
                field_ <- C'.cerialize (U'.message raw) name
                Capnp.ById.Xcd6db6afb4a0cf5c.set_Person'name raw field_
                field_ <- C'.cerialize (U'.message raw) email
                Capnp.ById.Xcd6db6afb4a0cf5c.set_Person'email raw field_
                let len_ = V.length phones
                field_ <- Capnp.ById.Xcd6db6afb4a0cf5c.new_Person'phones len_ raw
                forM_ [0..len_ - 1] $ \i -> do
                    elt <- C'.index i field_
                    C'.marshalInto elt (phones V.! i)
                field_ <- Capnp.ById.Xcd6db6afb4a0cf5c.get_Person'employment raw
                C'.marshalInto field_ employment
instance C'.Cerialize s Person
instance C'.FromStruct M'.ConstMsg Person where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xcd6db6afb4a0cf5c.Person M'.ConstMsg)
instance Default Person where
    def = PH'.defaultStruct
data Person'PhoneNumber
    = Person'PhoneNumber
        {number :: Text,
        type_ :: Capnp.ById.Xcd6db6afb4a0cf5c.Person'PhoneNumber'Type}
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Person'PhoneNumber where
    type Cerial msg Person'PhoneNumber = Capnp.ById.Xcd6db6afb4a0cf5c.Person'PhoneNumber msg
    decerialize raw = do
        Person'PhoneNumber <$>
            (Capnp.ById.Xcd6db6afb4a0cf5c.get_Person'PhoneNumber'number raw >>= C'.decerialize) <*>
            (Capnp.ById.Xcd6db6afb4a0cf5c.get_Person'PhoneNumber'type_ raw)
instance C'.Marshal Person'PhoneNumber where
    marshalInto raw value = do
        case value of
            Person'PhoneNumber{..} -> do
                field_ <- C'.cerialize (U'.message raw) number
                Capnp.ById.Xcd6db6afb4a0cf5c.set_Person'PhoneNumber'number raw field_
                Capnp.ById.Xcd6db6afb4a0cf5c.set_Person'PhoneNumber'type_ raw type_
instance C'.Cerialize s Person'PhoneNumber
instance C'.FromStruct M'.ConstMsg Person'PhoneNumber where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xcd6db6afb4a0cf5c.Person'PhoneNumber M'.ConstMsg)
instance Default Person'PhoneNumber where
    def = PH'.defaultStruct
data Person'employment
    = Person'employment'unemployed
    | Person'employment'employer (Text)
    | Person'employment'school (Text)
    | Person'employment'selfEmployed
    | Person'employment'unknown' Word16
    deriving(Show,Read,Eq,Generic)
instance C'.Decerialize Person'employment where
    type Cerial msg Person'employment = Capnp.ById.Xcd6db6afb4a0cf5c.Person'employment msg
    decerialize raw = do
        raw <- Capnp.ById.Xcd6db6afb4a0cf5c.get_Person'employment' raw
        case raw of
            Capnp.ById.Xcd6db6afb4a0cf5c.Person'employment'unemployed -> pure Person'employment'unemployed
            Capnp.ById.Xcd6db6afb4a0cf5c.Person'employment'employer val -> Person'employment'employer <$> C'.decerialize val
            Capnp.ById.Xcd6db6afb4a0cf5c.Person'employment'school val -> Person'employment'school <$> C'.decerialize val
            Capnp.ById.Xcd6db6afb4a0cf5c.Person'employment'selfEmployed -> pure Person'employment'selfEmployed
            Capnp.ById.Xcd6db6afb4a0cf5c.Person'employment'unknown' val -> pure $ Person'employment'unknown' val
instance C'.Marshal Person'employment where
    marshalInto raw value = do
        case value of
            Person'employment'unemployed -> Capnp.ById.Xcd6db6afb4a0cf5c.set_Person'employment'unemployed raw
            Person'employment'employer arg_ -> do
                field_ <- C'.cerialize (U'.message raw) arg_
                Capnp.ById.Xcd6db6afb4a0cf5c.set_Person'employment'employer raw field_
            Person'employment'school arg_ -> do
                field_ <- C'.cerialize (U'.message raw) arg_
                Capnp.ById.Xcd6db6afb4a0cf5c.set_Person'employment'school raw field_
            Person'employment'selfEmployed -> Capnp.ById.Xcd6db6afb4a0cf5c.set_Person'employment'selfEmployed raw
            Person'employment'unknown' arg_ -> Capnp.ById.Xcd6db6afb4a0cf5c.set_Person'employment'unknown' raw arg_
instance C'.FromStruct M'.ConstMsg Person'employment where
    fromStruct struct = do
        raw <- C'.fromStruct struct
        C'.decerialize (raw :: Capnp.ById.Xcd6db6afb4a0cf5c.Person'employment M'.ConstMsg)
instance Default Person'employment where
    def = PH'.defaultStruct